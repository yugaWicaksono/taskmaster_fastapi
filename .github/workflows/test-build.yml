# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI-test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Cache pip
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Add required env
      run: |
        touch .env
        echo "TEST_TOKEN_KEY = ${{ secrets.ACCESS_KEY }}" >> .env
        echo "TEST_API_KEY = ${{ secrets.API_KEY }}" >> .env
        echo "API_KEY_NAME = ${{ secrets.API_KEY_NAME }}" >> .env
        echo "COLL_KEYS = ${{ secrets.COLL_KEYS }}" >> .env
        echo "COLL_TASK = ${{ secrets.COLL_TASK }}" >> .env
        echo "DB = ${{ secrets.DB}}" >> .env
        echo "HOST = ${{ secrets.HOST }}" >> .env
        echo "PASS = ${{ secrets.PASS }}" >> .env
        echo "SECRET = ${{ secrets.SECRET }}" >> .env
        echo "USER = ${{ secrets.USER }}" >> .env
        echo "CLIENT_SECRET = ${{ secrets.CLIENT_SECRET }}" >> .env
        echo "AUTH_USER = ${{ secrets.AUTH_USER }}" >> .env
        echo "AUTH_ID = ${{ secrets.AUTH_ID }}" >> .env
        echo "AUTH_IAT = ${{ secrets.AUTH_IAT }}" >> .env
        cat .env
    - name: Test with pytest
      run: |
        python -m pytest /test/fastapi/test_suite.py::test_run